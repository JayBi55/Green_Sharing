// <auto-generated />
using System;
using GreenSharing.API.Repositories.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenSharing.API.Migrations
{
    [DbContext(typeof(GreenSharingContext))]
    partial class GreenSharingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsentAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Account", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5985ba59-583b-49dc-9b44-fbb21382899f"),
                            AccountTypeId = new Guid("35049d72-c586-4bed-92b0-918fd61ca92e"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 346, DateTimeKind.Utc).AddTicks(971),
                            Email = "farmer@yopmail.com",
                            FirstName = "Farmer",
                            IsActive = true,
                            IsConsentAccepted = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            LastName = "John Doe",
                            Password = "AQAAAAEAACcQAAAAEAxBcWKtdM3s6Z/0uO95tjAsOrvXe4y2EsX3hdxtcehCFAWWTNuaNaG0vTWqDyzuqA==",
                            SurName = "Big J."
                        },
                        new
                        {
                            Id = new Guid("46fa891c-1ae4-4373-aaa8-1125432ce9be"),
                            AccountTypeId = new Guid("9efcc1a2-ddf1-4ac4-b1d4-0e406a3bb6f3"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 355, DateTimeKind.Utc).AddTicks(1620),
                            Email = "bankFood@yopmail.com",
                            FirstName = "Moisson Montreal",
                            IsActive = true,
                            IsConsentAccepted = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            LastName = "Moisson Montreal",
                            Password = "AQAAAAEAACcQAAAAEIUNOKQUptJeZTBmOTTXRP9Yx49wiufSZyPbjPzBiphCwRZ+PvNbc2kykI3NNlxE+w==",
                            SurName = "Give Back to Community"
                        },
                        new
                        {
                            Id = new Guid("fdc6aa3d-7eea-454c-a1aa-f76722087cd3"),
                            AccountTypeId = new Guid("e406461d-d732-4f4f-917f-a69128cb0599"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 363, DateTimeKind.Utc).AddTicks(3808),
                            Email = "gleaner@yopmail.com",
                            FirstName = "Gleaner",
                            IsActive = true,
                            IsConsentAccepted = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            LastName = "Jeanette Odu",
                            Password = "AQAAAAEAACcQAAAAEG1QiDze9hfweQkiDKeQqWO/0aOJdgfBbA1/ivwIxcJBlId2O3GPQZdxaPqmmf6Yow==",
                            SurName = "Jeane"
                        });
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("7b22ddb4-48b0-456d-8ada-ec438b8df9b1"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("AccountLocation", "location");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountOAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("OAuthProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OAuthProviderId");

                    b.ToTable("AccountOAuth", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AccountPassword", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenFcm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeviceInfoId");

                    b.ToTable("AccountSession", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AccountType", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35049d72-c586-4bed-92b0-918fd61ca92e"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 76, DateTimeKind.Utc).AddTicks(4222),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Farmer",
                            NameKey = "Farmer"
                        },
                        new
                        {
                            Id = new Guid("9efcc1a2-ddf1-4ac4-b1d4-0e406a3bb6f3"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 76, DateTimeKind.Utc).AddTicks(4893),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "BankFood",
                            NameKey = "BankFood"
                        },
                        new
                        {
                            Id = new Guid("e406461d-d732-4f4f-917f-a69128cb0599"),
                            CreationDate = new DateTime(2022, 11, 6, 20, 49, 9, 76, DateTimeKind.Utc).AddTicks(4901),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Gleaner",
                            NameKey = "Gleaner"
                        });
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressType", "location");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DistanceMax")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BankFood", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFoodProductConsumable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankFoodId");

                    b.HasIndex("ProductId");

                    b.ToTable("BankFoodProductConsumable");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFoodReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BankFoodId");

                    b.ToTable("BankFoodReview");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.DeviceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfo", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CarpoolingPlaces")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EventPriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FarmerProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GleanedQuantity")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarpoolingEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MinimumCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(5L);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventPriorityId");

                    b.HasIndex("FarmerProductId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.EventPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("EventPriority");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ed145ee-4231-4b52-a97a-2d89442a8742"),
                            Code = "RED",
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Urgent"
                        },
                        new
                        {
                            Id = new Guid("1dedacaa-28f1-45fe-ad06-5e28a7a8e5d2"),
                            Code = "ORANGE",
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Medium"
                        },
                        new
                        {
                            Id = new Guid("77d86c1f-ffd7-49c4-ac5a-df4f7f054517"),
                            Code = "YELLOW",
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Moderate"
                        },
                        new
                        {
                            Id = new Guid("0f824a56-5507-4dd2-b694-879d2edfe36c"),
                            Code = "VERT",
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Normal"
                        });
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.EventReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventReview");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.EventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Carpooling")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GleanerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GleanerId");

                    b.ToTable("EventSubscription");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Farmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Availability")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Farmer", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.FarmerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("ProductId");

                    b.ToTable("FarmerProduct");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.FarmerReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerReview");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Gleaner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DistanceMax")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Gleaner", "identity");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.GleanerReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GleanerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GleanerId");

                    b.ToTable("GleanerReview");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.OAuthProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OAuthProvider", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ede4680a-eb19-43db-82c9-2bdfe61c0e2c"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Google"
                        },
                        new
                        {
                            Id = new Guid("7756997b-5808-434d-ad43-7e2d28b06a84"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("f35e5759-a9a5-4ea9-8c96-3c900fedde91"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Facebook"
                        });
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5a7d3a5-365d-4cba-a48e-1bbf6f39fdad"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Vegetable",
                            Notes = "Vegetable"
                        },
                        new
                        {
                            Id = new Guid("b57f1520-9f64-4442-8414-a2b2dfdb8d13"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Animal",
                            Notes = "Animal"
                        },
                        new
                        {
                            Id = new Guid("37183ebb-9c7f-41e8-8b55-3bf292a37c25"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Other",
                            Notes = "Other"
                        });
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountType", "AccountType")
                        .WithMany("Account")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountLocation", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany("AccountLocations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountOAuth", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany("OAuthAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.OAuthProvider", "OAuthProvider")
                        .WithMany()
                        .HasForeignKey("OAuthProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OAuthProvider");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountPassword", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountSession", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany("AccountSessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.DeviceInfo", "DeviceInfo")
                        .WithMany()
                        .HasForeignKey("DeviceInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFood", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFoodProductConsumable", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFood", "BankFood")
                        .WithMany()
                        .HasForeignKey("BankFoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Product", "Produit")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankFood");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFoodReview", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.BankFood", "BankFood")
                        .WithMany()
                        .HasForeignKey("BankFoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BankFood");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Event", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.EventPriority", "EventPriority")
                        .WithMany()
                        .HasForeignKey("EventPriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.FarmerProduct", "FarmerProduct")
                        .WithMany()
                        .HasForeignKey("FarmerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventPriority");

                    b.Navigation("FarmerProduct");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.EventReview", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.EventSubscription", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Gleaner", "Gleaner")
                        .WithMany()
                        .HasForeignKey("GleanerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Gleaner");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Farmer", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.FarmerProduct", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.FarmerReview", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Gleaner", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.GleanerReview", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.Gleaner", "Gleaner")
                        .WithMany()
                        .HasForeignKey("GleanerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Gleaner");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Product", b =>
                {
                    b.HasOne("GreenSharing.API.Repositories.DataAccessLayer.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.Account", b =>
                {
                    b.Navigation("AccountLocations");

                    b.Navigation("AccountSessions");

                    b.Navigation("OAuthAccounts");
                });

            modelBuilder.Entity("GreenSharing.API.Repositories.DataAccessLayer.Models.AccountType", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
